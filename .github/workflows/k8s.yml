# This is a basic workflow to help you get started with Actions

name: Arthur AWS Kubernetes

run-name: Run Terraform plan/apply on k8s resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  ec2-instance-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ACCESS_KEY_ID: ASIA2QIXXJAZDDI6R55Y
      SECRET_ACCESS_KEY: ZohQl4IugYkWW6XJfp/JjNlxgIZEzxU5QwMIvD/u
      AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEAEaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAKuyGVxoIqxAvKsX0S8gvhoGHvp9ZHqsk92I6FLz+jV9AiBFn/7LbjQ/Oui5cS2dQJcJMJuvrEqgJ5cyCN8v/Fn3ZSqOAwhaEAMaDDcyMjE0MTEzNjk0NiIMGpXnDSJyJCUfHGgGKusCnceiednVfDxZpjoqIqzSXfvYj83vVHX2f+fSxhl/yOaIMB/ItndHwSPaF6S2oDtqe9vH6FqAKu19C8pjp6PEKUgCDVCruJ9UV8cpA3qZw1siyvfgzXum5fZ0XXT90O5GvTncq/aSnvTHWOToiR6e0Q6K0VRK3tZsGUluqdxSFJS80jW6eyAs00GzH3uN7TO8g3wpvvvlE0F3U3pg+iE3n+qrUbhINL1arKPCxXLy12fna9iCeufe6pd+rk3fDkJWhbwevHqFmxoQbgbfgfgsv1i9lYtEhfmIPqUs+iKUoNsN5sm3BDT6/Wc5dwWJefz1ZkwqMtks5Vhy4CYq8ef3MEjFuOiAUDCwBupj8jR/cJR3br+ONurF9lzhPfWMkmWUd7gEArXxTYXEh2WfyRZpoCbJHLa49KmA+NDCt3Pj7qpdP1WBVeoH2Jhj12CadKNwvOUBaZ2Y3JfQ6Ug+iLACo7Kr1Etz/bSXEEIZMIXxtaQGOqYBEF0Pq+/g5CIUe3KcdCqAoE2QJxNS35UKLjyneKh3sUEilgeIBXtND3XCZGxz2doawAYqwGZ3Dbb/5ULx5B79ayVkrTod8c28KMGzR3hhDlO492rmf5q8WUq5cX6pGfIUs5aJq+vtI31CaY7g0QjYWFvAUH9EBsy7nM+rkzxtdTIh8gZIoQauXDUeutObY/iJ6ELJlU5wlMrXuaBEQkn2PG4T+bWJmA==
      AWS_EC2_METADATA_DISABLED: true
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

      - name: Terraform apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform apply -var-file="module.tfvars" --auto-approve