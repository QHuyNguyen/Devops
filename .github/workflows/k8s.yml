# This is a basic workflow to help you get started with Actions

name: Arthur AWS Kubernetes Init/Plan/Apply

run-name: Run Terraform plan/apply on k8s resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZBEFMNSPF
  SECRET_ACCESS_KEY: kL6RBX2Yuhk77OSzeJUOaOz13yWM0UcBMAhwvp30
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEF4aDmFwLXNvdXRoZWFzdC0yIkcwRQIgU+Juo4/7JA59yTFVdSVm/8cXpfdZkQhyERsblw1ae+cCIQDIkhX50rCjZocSMmGc/GxR5S+HO3gNr5Yq0HRz9veBziqXAwi3//////////8BEAMaDDcyMjE0MTEzNjk0NiIMEDiE8Ll7+7EAsxkcKusCzdJnGgcoEH4TI1S9jYoyydxDWElSVnCriMMZjzmUq2m6NNzLzTuH0SADbsZoQsL4eo0nxkM/PS+jyYk7+UZyjiYL/eBZsnDS43fXRWlGeGkcDdc94eZcDFT6oQ5B/tjqe2qLPMsV307VtjODyFpmYI0UfIcNOnZpTtVxYxzVArPL+MWMswcqyszrKraWRv5pv+WoPeRQBZFk5iBsJU2FMAesQN0bFIXqMyEbY5rNoUeMlPHrNPMJ010e/azmImVX446ZGHhE0VKXqYKaep4oEypZuLjm26rhaoKMaILzP+awLniIGBcnS0lp2MXSXpRM4Mgd/1lkG7ohe6/ryi8Kpcxva5j8x+VfJB+VL5TdSuJlNvjfPKOvucuIfXYzhH2sW9tb6xZP81k3W+a3afBxg0ziJxoC12Yc0lQgxakBALKhTFG9tXy3yfN6UI7R6xETOMF5DSRSiXlnnyKiq7HUm2vAe/zlV+K+GZ34MNajyqQGOqYB8wfgr2BkZ+ofCpqkt2JwGdQ2u85QFBoSlZ6jvmjSiMvgCjmeRpf4RPyDSTWmNU5FRi1WLkltusG3n6wZGskyuieM8bGZRzZBU1SyCWE0nKnKGfcxnNrCsoDUSPfquLs/3m0QcOFa7oLIZ5VJu2glSYywDg9zn39OBC2iql5+XAEvx3fztP5WTuqP0yK99zM2dYPCIVdXHwtkPK/hdDXOWUOj58FlYQ==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  ec2-instance-plan:
    # The type of runner that the job will run on
    needs: vpc-apply
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

  ec2-instance-apply:
    runs-on: ubuntu-latest
    environment: production
    needs: ec2-instance-plan
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show
          terraform apply -var-file="module.tfvars" --auto-approve

  vpc-plan:
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show

  vpc-apply:
    runs-on: ubuntu-latest
    needs: vpc-plan
    environment: production
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show
          terraform apply -var-file="module.tfvars" --auto-approve