# This is a basic workflow to help you get started with Actions

name: Arthur AWS Kubernetes Init/Plan/Apply

run-name: Run Terraform plan/apply on k8s resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZGV75WJV4
  SECRET_ACCESS_KEY: GEW+LYKom4L1QCjhlnxuxRtEpZTI+XBIoM9skY/J
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEHgaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAIFy/scM1ijoQANBd5G7iJaWgN1YK9so+6ibVQ0mzqTBAiARaF89yygKBIWXqtb02sbTz798r/6ke+UsJCFTkeNK1iqXAwjR//////////8BEAMaDDcyMjE0MTEzNjk0NiIMmrUsqqMvs+QpSSoTKusCkdmaBfQer/CQVPlMhnjRJ+R9VMa17PCONWl05N9OP4OPpmzRPtTnYy4Yki2G9515cujk0mlDOsEoLnLRl0KGpX/qKgAjpiuuWdsGZ3NEULI8TZBBKZIUS23o4wrGVeFHA6EKa5bpoeQB+1shVWjyTOuTItViYAMBv0tpa+WesmLLIz3NIkWLScC0pnLyIAtXk6cpqSHPbyv2CLZLszRRHplXRaE82OU5ZvBZf9YXle17mhu4CV2ccr8QJBgcj3kxo0m6aA5VlHfxnuJcYKi7KDDoEg/ZnTTUvEs1srZUPaq30b+b+HMymbnllIzK9TZmW5aQ5WNxWYNlPDnyiiI0HuzEiz9AIwJBRGg8hgIEgunMJ3trWHLmoWsK3mKjW1DsuQdUjZD9dU+/RtjDUgP3fYunGr3pArW+QdQLCA8s43jnRE4xJGZv/YaopsRA4mUJ6xrzgRKBR5a/TC2bpcc4uRCutUyx7RPXwpwfMMb+z6QGOqYB8En7DzUiDcdh/Y4V/9/cm89l6xWf81VqPsAyjfMEtKQvcxYMMLw4jtBFTctt1Q9AB9wSdsaNQqDyakhWyvb26UC5RvnYHcieLNlLxxw1pzfIUp7+hFDKDa60FuldmSoLcS8w1CxcNoa0bX4GMswOx+2msKogi4nSmmCZ/lm5akpyfzEWJB12Oq8HFIuKMGWf7xhSkToo9GL1kcrejv9luwp8KZH8SA==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  ec2-instance-plan:
    # The type of runner that the job will run on
    needs: vpc-apply
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

  ec2-instance-apply:
    runs-on: ubuntu-latest
    environment: production
    needs: ec2-instance-plan
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show
          terraform apply -var-file="module.tfvars" --auto-approve

  vpc-plan:
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show

  vpc-apply:
    runs-on: ubuntu-latest
    needs: vpc-plan
    environment: production
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show
          terraform apply -var-file="module.tfvars" --auto-approve