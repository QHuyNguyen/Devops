# This is a basic workflow to help you get started with Actions

name: Arthur AWS Kubernetes

run-name: Run Terraform plan/apply on k8s resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZKZZBS6CT
  SECRET_ACCESS_KEY: YLFiSU7zapUQGq0FCCoXX0fKO/lC/+1kxkyQz7Zh
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEEYaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAOboGrgPRxF8EFXqhf5EUr+5pFoNYUKl+AbyNNKCBVrGAiA7o5Thfc5qprdqW6UQZ51pAYMjmPaFl5cpl+g8r+jeWiqXAwif//////////8BEAMaDDcyMjE0MTEzNjk0NiIMGt/wBV3+eu7FnHfnKusCYxXg8MKuRU+TiVx9W0R2QRn/upr5UAPFNC8/+tqLfhEabthLh5zvBUl3Hsru3vQWPHBXSeQ5KaQc4nFMBDnOobPvlQ8IODE3MJ39m291ShjmlzybWBIZW1wpO6XGPdC4ghbOkVOPTFWnTyHBXq0TCjtC+RaV/umkNLNpQ7ulz0oQBvWxs9ofljBr9fsqN4taRBWRoh5r1pAReEe7qJv0Tryn4Pnx2IIO3SiQ+xy9kffnBXpDO5VQ9tdRdiSUgAL7gWGccfmNHzu5nzlvYVZlZbWNQMwaOcJgzbAYdKucCSCQ/ft9DXoWuARWYItqRT62tCCIt3p6ffWvzbTBLfgYwlNBBoNrfO0ocq06mvApQrLjXOJlMqdi+RykfxJ+LyqACJ+FSgJ2ebbLQaIxsQOXbTnDerUM0gYuxLiU0Ir2mmVv7zOzGTQ4f0eQjuMC2Ua6nlyMVRqd4BemNEAvnxYA17AQ8+GAU1W2Oj8VMLSIxaQGOqYBDtDplnQe9E1U3BbI/zO96f5PoNEV6vKb824wuYvDEIpRzHDNTx0+/ANIvEvZWalwdfJ/ej+YkUqk+0ZthDY21hZYtXq5W1/7N9yLueWgpSlePiv+JLpg+bZjCswy/SHECJuQ95vUwtF1DNmZrJB1o6pW3g7AybkvHBQdZkNla+LHwEFNegel7rMgspJtCOIe702mLT20823bW1n8Uo2FYkYL/wk6NQ==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  ec2-instance-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/ec2

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

      - name: Terraform apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform destroy --auto-approve
#          terraform apply -var-file="module.tfvars" --auto-approve

  vpc-plan:
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Init - Plan - Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform plan -var-file="module.tfvars"
          terraform show
          terraform destroy --auto-approve
#          terraform apply -var-file="module.tfvars" --auto-approve