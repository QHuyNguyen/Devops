# This is a basic workflow to help you get started with Actions

name: Arthur AWS Kubernetes Init/Plan/Apply

run-name: Run Terraform plan/apply on k8s resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZICEL7VBM
  SECRET_ACCESS_KEY: RRFn1Xp6Rez+tJhGPHHPei1O7H2dK8QnBvgJrjmv
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEJD//////////wEaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAMBZGqXZ56yw77Ih+hoDm5FhMRlvbZ1dK4pFk/a4lEI8AiAeRc7i1A8PuNzWnjC3vDbi9lJcMHdmcZ3YJ8YBJxku4yqXAwjp//////////8BEAMaDDcyMjE0MTEzNjk0NiIMi0FY5fEp421Us2G7KusCG/zvsuNCIXlV1vVG2pVJU4n2C2dSRwq3oZau9b0EJXTVWEyTt3Yq2ETmjtmhCcv3el1nRkkGJPuk2EUkg+vE5RyW3nRs3i2c2CYmTm51SmKTefYEWgBCMIl8VpSLRopalAqMA1iZryn7U3gL5+hnGdfox/Tnbzgpbw67k78WwkQ9q3CQnqzh5turguJQCStNNAu3bEM9cYTDcWLb+evegS3ByWElznlKArvsosugpS2v7TbCmnb2M9+FqMNf4nI5FWpN8ZcAkhP62I4AZ2x4Mc5iA8uxR3dxEIWVRZ2Ztv2dIGe7kt1o74OT3ekTTiKowtpvNcvSWXYU3eQ0sVJOUIeW7Wut4ikLOh1GFfz+6g/V7yydEIy359KT8S+D7pGEsgjgiL4k7IArLsUlgM21gaC3PsVzYxVYzgTIUM6kd9v2okLeiX3x/uIRvOkArJSynLDCw9kEvGY0e9U6GkMfyv+JjdznCjYJCvdWMOam1aQGOqYBzE8YhQk3VDB1G2Nyq0lXn71QnGviX633KadDk23s86YCx/8G075dGmtXpxExtdQzRdJz1sGMYNZCc70wFqDkh/Dds2iPoUoNl/FgtEvVxFZsz536yoGWUWLolqltjjLew0VVTD15OgqS2BESdS4bMg7oi8uVwAcBSMETf8Zb00blwCqd79lHaXpnEdUrltC28I/O21V4v3zGvTHqXa1nEpdZoVw6nA==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-ec2-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/k8s

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

  vpc-ec2-apply:
    runs-on: ubuntu-latest
    environment: production
    needs: vpc-ec2-plan
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/k8s
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform apply -var-file="module.tfvars" --auto-approve