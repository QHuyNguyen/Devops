# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZOHFNIIFM
  SECRET_ACCESS_KEY: sIhr629brY2JQLetw2Hp6LiKFuBZ2YEAig3JoMiN
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEGkaDmFwLXNvdXRoZWFzdC0yIkcwRQIgBabqmtElYZP6PyiaFreXwXfyc5/aG3Kq0GdP+YNsuTYCIQCOgzJUKPrHGFyaa7xbvKbQ8Anm95EhedmaynBnDfE2OyqOAwhCEAMaDDcyMjE0MTEzNjk0NiIMo+FObR9a7h2LQtQhKusCGTUFIpgmTOe6qkIe8Jb4GxLSV/pFUZ9qz2sShT+KlveyUUvSQ6YQl0ptaXq+JBLQDvmJNzqRjXvF2uF49S7Oa5+TmZjM9JgZhBUVn7tcZ/KoH0RUlgo+GmA1ndHNXjLLvyY0P0D/81qw/Drs3gozThdHstpoUSKEfKMu1v+6zd9H5EZMwWmRUo+zTSIY6gTnoav3/zmKA4U8/ZGQWVixHwAHfPX3MX8k0JjMsDcR/W0UOwr8rZAzIgbJ4RZ02px0b3xrJZ/Y5SGakwbta69zgbd1L47L4jlTojTxI3GIec9rM+my5AKbpxXAdPinw1c7BnzyZ744vWzfih3btaOliNAvVWiFwFV9lgLVu+67jsAUhiVHDp/zV1aOyPCH4mOL1pIZOy/+G6GLr1FoyhBV6MNjaZUcZy0TdlGG5Hz5L11WsiTqg4CBmNujn25xgtlDXgNQftkOuMkwpBbhlrgsAGFIcAbT3TVLzfLvMKqx1qcGOqYB5bGCkaq3HzHzTq7zPrOlRetj/sd0o3Hmx55uQCo5t8MrY4QPNzxJmQ/hXht3z842IDg+GuyVBazKKU3Tab7vc2v7sOD40nVWrvYhC9LqNfJJCHEYyXIJnvjwLEqpUnH30FXUJvMrMANXKfrnapq6ID6AyCddjZXY7EJThjoNbY5fclvCEVVglj70VTbJykl3q/ZmNvJHTwreJ0LSkNdrfcSAc/8r+w==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          make init
      
      - name: Terraform Plan
        run: |
          make plan
      
      - name: Terraform Show
        run: |
          make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          make apply

  ec2-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    needs: vpc-apply
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + plan
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          sudo docker-compose run --rm devops-utils sh -c 'cd components/ec2; terraform init; terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"'          

  ec2-apply:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: ec2-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + Apply
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform apply -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
  
  ec2-destroy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: ec2-apply
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + Destroy
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform destroy -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
