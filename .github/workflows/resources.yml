# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZB6VXN3GI
  SECRET_ACCESS_KEY: VUy+/VJiBjXbfxPFY43mgri+hThP40bW7iaNdQAa
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEE8aDmFwLXNvdXRoZWFzdC0yIkYwRAIgWIEeBoSrJ+Q1guLM0irjOAyJrnUKz/aNs/Bj7r0oQ+oCIDw4IpV6XDaku0R1/rYJhozn3LfOsUfJmJEKA3F6oG7WKo4DCCgQAxoMNzIyMTQxMTM2OTQ2Igw7zxuHPb8P0XHc+ocq6wJ82Ej17CYHBIIQmC2a5VOdk1h8Xmsczw0zdPr3juGIaDxlWg3YGMcbIplkJJLKDeh378n1MiQYU1fpIBqA/jGrCn5IDgdbc5iDItrO90wG6tEf52TR52L95UMeZlaPqZjmw/p9udjjLObIqC1EvNeSTKSQmbg+Uy4Ow7zNT/BdasveYAHh6yXPr44RIAO8tZNzqJf++mpaDkSQolrCf/eloSnH5LyBIY79ldOZDeS6jkaVaIoKSy/bGwNTDyaYRs6z5x6BUfDAvv4HQXo0bYTJalgd+B9+md32oomoNUHbTN8KaRip1a9jzp72/0MQ0TTkjH+xZlz0oO0rKgERete3cVdz5yfi9ZJcWWcGtRkIwx6PrRgoDHLMdSOnQK4o+4XNP8TpOys/lmXvHGVFSNK9te5inDh8ZdZGv7iH7nlsl4wi/GQRxZcrqtL2Yu1VlZMmOHPPkQgeugiVkNrOJtvwCjSnnQhw+OWqFocwyNTQpwY6pwHln760VganZNq2TH3p+tYG99dqvR6nDI1AtpRVN/glBaNL03HHMrjD8WggSD7MAF0/6W1NQqd0VNQc/0gszPKqPtp2xwZOkmpqwWkxQPfcNWY/wZ1U2R/labtU9gYru7cxOMhhTwDIBRp2BBTWZXr9mIID0Z60mIsCrsNbsgBCH3p8uhueYHyuxaiLuvWO+7nG1zshYagjnkY0wdp4nnc9jCetmyj1kQ==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          make init
      
      - name: Terraform Plan
        run: |
          make plan
      
      - name: Terraform Show
        run: |
          make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          make apply

  ec2-plan:
    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + plan
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          sudo docker-compose run --rm devops-utils sh -c 'cd components/ec2; terraform init; terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"'          

  ec2-apply:
    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: ec2-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + Apply
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform apply -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
