# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZEBLEZR6J
  SECRET_ACCESS_KEY: lyHXgl9QTHcO467gX+y1NX4GBCwtxJYy49pPyD6j
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEDUaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAJbum35b/ClHe2Lo7jAnxkbxBuUtjFua6Upr7zb6h7H5AiB/QPEK0RtL4XfkGK+jS81tliuWrGRNVBvK+GunsWI+xCqXAwj+//////////8BEAMaDDcyMjE0MTEzNjk0NiIM90kB4gF9POFzB6kgKusC5wd6KR4WGcJ2UYy7Wxbd3j3Tr246LrR5NVsledy+x+LpVqONvOT/X1KxoHELQ9YsaiVTltaw5icXtq7tXf14USyTgZ7H6phccJOH3f2fyHgfWN0GG6xYBqhXZUrGAshG+0CcDVk0rI75Q3UzYAYB/PWU6oo2yd9CW7i5/fsAhHItKPo6XIwOd+4QXDpZZtu7f2Ha9f8qjhk6Ou4zRSdCwOTvQ5R5L7KA1R1C2TbPg8sbxcLQA+PxHqTL+kIBcueGkwKxML8Ek3NJRTkcKjdkmYVQrqEFpIYFS3UiFZFlsLqfB2ZvvORKIpzs9Dsh7nS7b0dX+lAivjKuNW+9qCUTEtoxVt8o4zlVOe9LstLbGcWNIedQI4wv3+EEnbXiE0KqAG08HiEzaEytsLjnm0GzmrCUxiRzQKdPqrOyjgZkqwb1ICRIN1p/Ylij9q0XixfZOQ7rjc2aUIAZkH/G/D4rkfTCh3pMumsOD0kaMKSJy6cGOqYBruCcAqWBz8M4rb5hB3ovD+YwqqtIM9QynGzdbqS3nbqcZ15hwZHrEr2lVeuWOArwd5cBKhgmP2ExC2efi2dOsIug5ZEmk7wfiv4EMEZelREF9hSv0UnBRKS5ttBJS6TNYbSVjRaVAt9aLQQ3Zn9hc5xPSFcKpLHY4EEflZ3YxX/2cF0Bj6TewY2MJNPwTMlqzk4+/voGx/gtj2CqmfpFzckTMlfD9Q==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          make init
      
      - name: Terraform Plan
        run: |
          make plan
      
      - name: Terraform Show
        run: |
          make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          make apply

  ec2-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + plan
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"
