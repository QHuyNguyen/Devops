# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZNPQAFQUF
  SECRET_ACCESS_KEY: xrxnA/aAsRQp6rU/Xoq8Ok+S2dlZy7iIwsjE25zQ
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEFMaDmFwLXNvdXRoZWFzdC0yIkgwRgIhAM+9IcBrVoN2Ta890W+GmkkZuZxM5J23xs9TDcOD5RFJAiEA965uRCD/XYmCkbDNbaGPyfPx0tSqQvz3VxmiCUxPWEcqjgMILBADGgw3MjIxNDExMzY5NDYiDJWH0BdFH/+OoH3bsSrrAiv4Z0fVegaMI+LR+A2Uzw4+T0pq/7YIqFWyM1lJdXdSXkbkM5I2bS2b9bUli6RFmn1NfFnK9wmMLN3hMqyWsBA+lqTqJP0HWZhTgp13PKOfRJGaeotGV13IiwKJ6wHeyTihRKZZ9YBicswM8kvG87y5mlVQPyF+5B8Z9BrshjnRXmwQqD+CdFTrWTwEgRYkX1f5Ow30fS0Kfiq1yWcm2KWxG9OpswDZiCF7vYOKXWsJxTD/XqFfy0qqaD7srqo2ZR7CFUWo+A5UHL9k++kvGZQLpOH96CeVU1J9P48Zv+VEKUgvQVYaDaIiTMFrjIvhoek766Vg8G8a6vzqdgLAyhVe+a1GbYFKZqC/NSZJOo+hu4+fwo0amq4McSa1G1ZJfJrbnLw1VK2wy5Z4uOjx/vOGcdOQjxIDeNdvll4hN92FV8t3NSgJVeE2DaKNcO5aDGHnPBOWgtsSKLABdHkt72zHMLqw5rrGktgeTjDuyNGnBjqlAXrOefqcHaxqLGUG4rB2Fp5q3hFZHBy3XShsvtgDp3jkVEc7p3jUMXO168seKDUoM5e34xcuA6uQaVxM1ixpE3ca8e7AIys9qly7j51N9jahVOcLmpPNSHwD7645OLdZBTdGoLvKMoSCH8AcZfpgF1aZetGJ78gMYR1rA3BmJVzjgQEned7IKPHDcUxPU1OgmWQG1HUn/80NR54+yqMvLur2YV4WWA==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          make init
      
      - name: Terraform Plan
        run: |
          make plan
      
      - name: Terraform Show
        run: |
          make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          make apply

  ec2-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + plan
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          sudo docker-compose run --rm devops-utils sh -c 'cd components/ec2; terraform init; terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"'          

  ec2-apply:
    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: ec2-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + Apply
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform apply -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
  
  ec2-destroy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: ec2-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + Destroy
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform destroy -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
