# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZIA756OVA
  SECRET_ACCESS_KEY: t7vV+U0n5UE2K9uijnflveg8kv24TFM55g7+suPL
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEKr//////////wEaDmFwLXNvdXRoZWFzdC0yIkcwRQIhAKSTI8MTzSk6A7RuXJ6ClEb/OjY5Ftd3dpXJwgUGUirJAiAcLm9nKzhUDJzoKLkHR/jzr7ve1rhDVILJ+u/nOc2mNCqOAwh0EAMaDDcyMjE0MTEzNjk0NiIM1//n8uvyKkfYlFVYKusC4CxhibfC18ugoi01rohcoT2JzuO41LYwORoZU5pq3UcZin0wpdKjPRUN9TGn+vAa0g2wd4m3s079gu/oORJwrlOqui84MzY0wjK2HIcTdi8FltT6LbeoBmIELr9gQEW+qhsbOWAIQBQWIXEcqywM+EsFAjw+rd0qG1nJdE0zRK5z8zJc48uCpNJQ1rlkcyYB1Gwv6KyhR/8f0UJ8A8M2PzCpVPzQIqdwwurRhh28OpZ9ZG9HTARsWmRHMP5tX9+G+LLYc5n8pnDHYupBBayjkBmlb/fbcYoNt4U9mcBJL5Bur8ICIuCnk1QhK6yTjj478u0hso7raY8gh9ti8M0O6EjnxtQUWZ5alSSd/oiTncWExlgsvEhYNQoiyrsW6LIQzy5zGJB5d3c0e1BmdmuQceIS7BGokSKRo8sibQBnGuhhb4Oqu7+IqIXT3powIvffW4VrABBu7vzPrOJwVP9ig0A8dtBpbWkPLR3cMMzHrKcGOqYBvqJsBCSopRzvY6U0t1NkL85lpBNTKHkZjy5I1O0Pzo5mJw5UOhTsXtC/4gqLrg9cwFdab0fFu7pXewf+DJQnIX4vfTisP9Lu5JmSZUHW63M0eQumqRweez7ypor6ZF7h6jsZ5Decp2wNYqol1FDeb93hHoSS3soPpVDph0DkIHNjCScSU8xDBxD4kbLLloN3QdPtC7ia3Er9HDzkX1B88Ofh2Mi6WQ==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          make init
      
      - name: Terraform Plan
        run: |
          make plan
      
      - name: Terraform Show
        run: |
          make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          make apply

  ec2-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Terraform Init + plan
        # Assume role from 1 account to do stuff in other accounts
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
          cd components/ec2
          terraform init
          terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"
