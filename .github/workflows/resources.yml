# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZMXA7SWN2
  SECRET_ACCESS_KEY: at+fIzJuNQ39Ouux9DZnJcA+hdzCFWWfcSpGPK6X
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEGsaDmFwLXNvdXRoZWFzdC0yIkcwRQIgChez2SEv5HCHkTB3lEG5SJiG84ZMOpOCdYJ250FEFQ8CIQDOtm/sSIKwPbsIqG6ootoS5o2PM+fNASQP4JYhxuGqyyqOAwhEEAMaDDcyMjE0MTEzNjk0NiIMlUvDZeDEWOQy3CV2KusCHTdNB9ObBCCw3VznoJMON+tgeesMQxCRZraBj2bk0YYZsdEGL97/uWuaT9lKmGYMqGrSzDDL4ll2PoAMbJ+qK4u+Ez7Xguh0Z/cdptFRy+Ej94ztNsGzOY7US5ZC7sWiZUKXPJu2k9MMljJkWdMp15AhKZ0hJcZwcdEqFjzu/XedNsB0GffWIHgW03yOQOPLd4zDhbG1xbAzcKE30ylW3rRZDtI63vFBcVrus7tdLRODWbL+fjkMU48UPyZwxsaM1Gak80iOAruZ/tc6RTJTfNn3aVH0zAHMoM/4igAtAxPCiSyV1G17lLdoUV+YpSG2ScVCbS7DyTOZU8ZnnkAUlorkZi5DOAr3LxCpwjOlk+q1paHKHh6qtVBlBp9q7cgbO+mj/MYAqzDzATh5LG279m2KOmeopL35tTLvIGw65Pi/6oYURBBIYdvgJbnT/XumfzNxhuRmlRHRywjD4WgV+hS7wo323dJePNW2MNnm1qcGOqYBGUaY3z47q7C2/FnoyjDilhyMq90LgOvhdI9rXShWFlcfW9j4Fn5HLTOe0O9PfUz43X7MPP9Q0evweqysaZpLsf0CdB+D417Uv856axLd95YMxqVKL7KzNmPHWHupU16V24rdM0Yaj3q46zHTjpLkZ3XqSl+QOuyzdxt8dLKWzu7zt84ury2ADOuoHUv+JxhR95ZcmSMq3M9tQNHq7L+/G0mrmbws8w==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc", "ec2"]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # Assume role from 1 account to do stuff in other accounts
        run: |
          make sts

      - name: Terraform Init
        run: |
          COMPONENT=${{ matrix.components }} make init
      
      - name: Terraform Plan
        run: |
          COMPONENT=${{ matrix.components }} make plan
      
      - name: Terraform Show
        run: |
          COMPONENT=${{ matrix.components }} make show

  vpc-apply:
    runs-on: ubuntu-latest
#    runs-on: ['self-hosted', 'linux', 'x64']
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/vpc
    strategy:
      matrix:
        components: ["vpc"]

    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |      
          COMPONENT=${{ matrix.components }} make apply

#  ec2-plan:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
##    runs-on: ['self-hosted', 'linux', 'x64']
#    needs: vpc-apply
#    env:
#      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/ec2
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3
#
#      # Runs a set of commands using the runners shell
#      - name: Terraform Init + plan
#        # Assume role from 1 account to do stuff in other accounts
#        run: |
#          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
#          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
#          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
#          sudo docker-compose run --rm devops-utils sh -c 'cd components/runner; terraform init; terraform plan -var-file="../../accounts/environments/non-prod/ec2/module.tfvars"'          
#
#  ec2-apply:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
##    runs-on: ['self-hosted', 'linux', 'x64']
#    environment: production
#    needs: ec2-plan
#    env:
#      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/ec2
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3
#
#      # Runs a set of commands using the runners shell
#      - name: Terraform Init + Apply
#        # Assume role from 1 account to do stuff in other accounts
#        run: |
#          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
#          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
#          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
#          cd components/runner
#          terraform init
#          terraform apply -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
#  
#  ec2-destroy:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
##    runs-on: ['self-hosted', 'linux', 'x64']
#    environment: production
#    needs: ec2-apply
#    env:
#      TERRAFORM_ROOT_MODULE: accounts/environments/non-prod/ec2
#
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3
#
#      # Runs a set of commands using the runners shell
#      - name: Terraform Init + Destroy
#        # Assume role from 1 account to do stuff in other accounts
#        run: |
#          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
#          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
#          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}    
#          cd components/runner
#          terraform init
#          terraform destroy -var-file="../../accounts/environments/non-prod/ec2/module.tfvars" --auto-approve
#