# This is a basic workflow to help you get started with Actions

name: Arthur AWS Resource Init/Plan/Apply

run-name: Run Terraform plan/apply on AWS resources


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ACCESS_KEY_ID: ASIA2QIXXJAZMBBN5SGI
  SECRET_ACCESS_KEY: KTL5FmXoLloDe0cIMGfYOODsvp67cbLphrUezsbg
  AWS_SESSION_TOKEN: IQoJb3JpZ2luX2VjEDgaDmFwLXNvdXRoZWFzdC0yIkcwRQIgN1tWGz/Em58S6+k1ESZ2o6UM/iMNrsrYBy3fNVVeN7YCIQDN1OQKDArhL+DYv6plkxGlfswPRNRNXS3e+DvClCzqliqXAwih//////////8BEAMaDDcyMjE0MTEzNjk0NiIM/jtINq89AR6szUdyKusCfBUEk84Jviit+z2CSK3WoKeKVk/ujU/AecbgS7wqOmFWrO0Xb6dT8jl80/E1FwCSevCacaHytyE3PrbqkVa0eQo+FIMDkXBbvXSGTshFIiElnhCm//vCkMdUDTnXu2n2D5BCy50u2OGh768/o0h65jd6pebZbrDuUmOrTUClkxyZgawDt3dwOtw5v96fMRm52xHEa1hu/tSh/CURE5PrwRUsHg9bkn6pMDFdQtRlE4QX/2Fgyk/IhaGnNE+qbeaImIYWuyQ9sfTHqShWr9LTAH+d3Av4w47RDN5F72opa+C0ALSghtNTD84jtCC8eyJ8BT81ml37GkQ4F2S2ezaE4csaMGoK+u9IedYrIPusc4bCb0HFxVT2zV4yGJF7c7HDDBZYfNDEoo5XK7/ucK6oOgNs7WK3R0dXH41YzvJvISUphLxrQY1E6KQ3t2MdpO9qp5FKUkDMxO3ZcAapV0QS2XFzDJ3+cpsPb6XeMN+P+qQGOqYBVox15ydVo1LbQuNCpgmNiVe10NJxQhRUtOjqJZeT9ybSSbjP1LDJ3bRpsFQslnzNHZTZA4d9vWI/1BNMW60ZAZE6lfOuRLVmHuLc9254H+q30rA4sPlJg0xINSqMkJlQ9edXL96ngUUu2Ivzgh9CLpdc9LkZz5lfEOrdlOUs4FnOfd8v53mhNen7UE8cO/c+ewFwQkhjCm73CLCgB2TUAK/r7wadVQ==
  AWS_EC2_METADATA_DISABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "setup"
  vpc-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Access AWS account
        # access key for devops aws
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          aws sts get-caller-identity

      - name: Terraform Init
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
      
      - name: Terraform Plan
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform plan -var-file="module.tfvars"
      
      - name: Terraform Show
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform show

  vpc-apply:
    runs-on: ubuntu-latest
    environment: production
    needs: vpc-plan
    env:
      TERRAFORM_ROOT_MODULE: environments/non-prod/ap-southeast-2/vpc
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Apply
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}          
          cd ${{ env.TERRAFORM_ROOT_MODULE }}
          terraform init
          terraform apply -var-file="module.tfvars" --auto-approve